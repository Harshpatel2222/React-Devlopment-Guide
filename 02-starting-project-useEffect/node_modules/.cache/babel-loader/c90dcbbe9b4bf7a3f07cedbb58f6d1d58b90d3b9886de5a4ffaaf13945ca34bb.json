{"ast":null,"code":"var _jsxFileName = \"/Users/harshpatel/react/02-starting-project-useEffect/src/components/store/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInfo = localStorage.getItem('isLoggedIn');\n    if (storedUserLoggedInInfo == '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","_s","setIsLoggedIn","useState","useEffect","storedUserLoggedInInfo","localStorage","getItem","loginHandler","setItem","logoutHandler","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harshpatel/react/02-starting-project-useEffect/src/components/store/AuthContext.js"],"sourcesContent":["import React from \"react\";\n\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout : () => {},\n    onLogin : (email,password) => {}\n})\n\nexport const AuthContextProvider = (props) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    useEffect(() => {\n        const storedUserLoggedInInfo = localStorage.getItem('isLoggedIn')\n    \n        if (storedUserLoggedInInfo == '1') {\n          setIsLoggedIn(true)\n        }\n      }, [])\n    \n\n    const loginHandler = (email, password) => {\n        // We should of course check email and password\n        // But it's just a dummy/ demo anyways\n        localStorage.setItem('isLoggedIn', '1');\n        setIsLoggedIn(true);\n      };\n    \n      const logoutHandler = () => {\n        setIsLoggedIn(false);\n      };\n\n    return (\n        <AuthContext.Provider value={{\n            isLoggedIn : isLoggedIn,\n            onLogout : logoutHandler,\n            onLogin : loginHandler\n        }}>{props.children}</AuthContext.Provider>\n    )\n}\n\nexport default AuthContext;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACpCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAGA,CAAA,KAAM,CAAC,CAAC;EACnBC,OAAO,EAAGA,CAACC,KAAK,EAACC,QAAQ,KAAK,CAAC;AACnC,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1C,MAAM,CAACP,UAAU,EAAEQ,aAAa,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACZ,MAAMC,sBAAsB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAEjE,IAAIF,sBAAsB,IAAI,GAAG,EAAE;MACjCH,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAGR,MAAMM,YAAY,GAAGA,CAACX,KAAK,EAAEC,QAAQ,KAAK;IACtC;IACA;IACAQ,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCP,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IAC1BR,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAEH,oBACIX,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MACzBlB,UAAU,EAAGA,UAAU;MACvBC,QAAQ,EAAGe,aAAa;MACxBd,OAAO,EAAGY;IACd,CAAE;IAAAK,QAAA,EAAEb,KAAK,CAACa;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAwB;AAElD,CAAC;AAAAhB,EAAA,CA9BYF,mBAAmB;AAAAmB,EAAA,GAAnBnB,mBAAmB;AAgChC,eAAeP,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}