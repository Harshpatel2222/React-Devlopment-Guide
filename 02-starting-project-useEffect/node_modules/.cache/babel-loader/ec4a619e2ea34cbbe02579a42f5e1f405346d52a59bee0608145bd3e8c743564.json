{"ast":null,"code":"var _jsxFileName = \"/Users/harshpatel/react/02-starting-project-useEffect/src/components/store/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthContextProvider, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","_s","setIsLoggedIn","useState","loginHandler","email","password","localStorage","setItem","logoutHandler","Provider","value","onLogin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harshpatel/react/02-starting-project-useEffect/src/components/store/AuthContext.js"],"sourcesContent":["import React from \"react\";\n\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout : () => {}\n})\n\nexport const AuthContextProvider = (props) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    const loginHandler = (email, password) => {\n        // We should of course check email and password\n        // But it's just a dummy/ demo anyways\n        localStorage.setItem('isLoggedIn', '1');\n        setIsLoggedIn(true);\n      };\n    \n      const logoutHandler = () => {\n        setIsLoggedIn(false);\n      };\n\n    return (\n        <AuthContext.Provider value={{\n            isLoggedIn : isLoggedIn,\n            onLogout : logoutHandler,\n            onLogin : loginHandler\n        }}>{props.children}</AuthContext.Provider>\n    )\n}\n\nexport default AuthContext;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACpCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAGA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1C,MAAM,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACtC;IACA;IACAC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCN,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMO,aAAa,GAAGA,CAAA,KAAM;IAC1BP,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAEH,oBACIR,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MACzBd,UAAU,EAAGA,UAAU;MACvBC,QAAQ,EAAGW,aAAa;MACxBG,OAAO,EAAGR;IACd,CAAE;IAAAS,QAAA,EAAEb,KAAK,CAACa;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAwB;AAElD,CAAC;AAAAhB,EAAA,CArBYF,mBAAmB;AAAAmB,EAAA,GAAnBnB,mBAAmB;AAuBhC,eAAeJ,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}